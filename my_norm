#!/usr/bin/env python3

import sys
from os import chdir, getcwd, remove, path, chmod, listdir
from os import stat as stats
import requests
import stat

version = "0.1.0"
actual_version = "https://raw.githubusercontent.com/CyrilGrosjean/my_norm/master/version/ver.txt?token=ANQZL75HEGEFF3RQ5NE4HJS6OSQHW"
actual_file = "https://raw.githubusercontent.com/CyrilGrosjean/my_norm/master/my_norm?token=ANQZL76OKQUC7WJAPLWJNPC6OSQKC"
path_directory = path.abspath(__file__)

files = []

def green():
    return "\033[32m"

def red():
    return "\033[31m"

def orange():
    return "\033[33m"

def blue():
    return "\033[34m"

def bold():
    return "\033[1m"

def end():
    return "\033[0m"

# ---------------- UPDATE THE FILE ---------------- #

def check_for_updates():
    global version
    global actual_version
    global actual_file
    global path_directory

    ver_file = []
    new_ver = []

    print(green() + "You are currently running version " + version + end())
    print(orange() + "Checking for updates..." + end())
    ver_file = version.split(".")
    file_found = False
    try:
        r = requests.get(actual_version)
        file_found = True
    except:
        file_found = False

    if file_found:
        del file_found
        with open("n_ver.txt", "wb") as f:
            f.write(r.content)
        del r
        file = open("n_ver.txt", "r")
        new_ver = file.read().split(".")
        file.close()
        remove("n_ver.txt")

        require_update = False
        for i in range(0, len(ver_file)):
            if ver_file[i] != new_ver[i]:
                require_update = True

        if require_update:
            print(orange() + "Your version is outdated !\nUpdating...\n")
            file_found = False
            try:
                r = requests.get(actual_file)
                file_found = True
            except:
                file_found = False

            if file_found:
                with open(path_directory, "wb") as f:
                    f.write(r.content)
                del r
                st = stats(path_directory)
                chmod(path_directory, st.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
                print(green() + "Program updated ! Please restart it.")
                exit(0)
            else:
                print(red() + "No Internet connection.\n" + end())
        else:
            print(green() + "The program is already up to date !\n" + end())
            del ver_file
            del new_ver
    else:
        print(red() + "No Internet connection.\n" + end())

# ---------------- FIND .C AND .H FILES ---------------- #

def check_files():
    global files

    repos = ['./']
    file_list = []

    while len(repos) != 0:
        file_list = listdir(repos[0])
        for i in file_list:
            if ".c" in i or ".h" in i:
                files.append(repos[0] + i)
            else:
                try:
                    temp = listdir(repos[0] + i + "/")
                    repos.append(repos[0] + i + "/")
                except:
                    pass
        del repos[0]
        file_list = []
    if len(files) == 0:
        print(red() + "Error: Cannot find '.c' file !")
        exit(84)
    print(green() + "Found " + orange() + bold() + str(len(files)) + end() + green() + " '.c' file(s) !")

# ---------------- CHECK MAJOR ---------------- #

def check_majors():
    global files

    major_error_list = {} # NAME: index
    file_errors = [] # file_name[:line]

    # O1 check

    repos = ['./']
    file_list = []
    list_end = [".c", ".h", "Makefile", ".a", ".gitignore", ".git", ".vscode"]

    while len(repos) != 0:
        file_list = listdir(repos[0])
        for i in file_list:
            is_it = True
            for h in list_end:
                if h in i:
                    is_it = False
            if is_it:
                try:
                    temp = listdir(repos[0] + i + "/")
                    repos.append(repos[0] + i + "/")
                except:
                    if "O1" not in major_error_list:
                        major_error_list["O1"] = []
                    file_errors.append(repos[0] + i)
                    major_error_list["O1"].append(len(file_errors) - 1)
        del repos[0]
        file_list = []

    del file_list
    del repos

    # O3 check

    for i in files:
        count = 0
        f = open(i, "r", encoding='utf-8')
        content = f.read()
        split_content = content.split("\n")

        f.close()
        del content
        del f

        for c in range(0, len(split_content)):
            if "{" in split_content[c]:
                if "(" in split_content[c - 1] and ")" in split_content[c - 1]:
                    if len(split_content[c - 1].split("(")[0].split(" ")) == 2:
                        count += 1
        if count > 5:
            if "O3" not in major_error_list:
                major_error_list["O3"] = []
            file_errors.append(i)
            major_error_list["O3"].append(len(file_errors) - 1)

    del count
    del split_content

    # O4 check

    for i in files:
        print(i)
        name = i.split("/")[-1]

        if not name.islower() or " " in name:
            if "O4" not in major_error_list:
                major_error_list["O4"] = []
            file_errors.append(i)
            major_error_list["O4"].append(len(file_errors) - 1)

    del name

    # G1 check

    header = ["/*", "** EPITECH PROJECT, ", "** ", "** File description:", "** ", "*/"]

    for i in files:
        tmp = open(i, "r", encoding='utf-8')
        content = tmp.read()
        content_split = content.split("\n")
        tmp.close()
        del content
        del tmp
        for i in range(0, len(header)):
            if header[i] not in content_split[i]:
                if "G1" not in major_error_list:
                    major_error_list["G1"] = []
                file_errors.append(i)
                major_error_list["G1"].append(len(file_errors) - 1)
                break
        del content_split

check_for_updates()

major_errors = {"O1": 0, "O3": 0, "O4": 0, "G1": 0, "F2": 0, "F3": 0, "F4": 0, "F5": 0, "F7": 0,
"L1": 0, "V1": 0, "H1": 0}
minor_errors = {"O2": 0, "G2": 0, "G3": 0, "G4": 0, "G5": 0, "F6": 0, "L2": 0, "L3": 0, "L4": 0,
"L5": 0, "L6": 0, "V3": 0, "C1": 0, "C3": 0, "H3": 0}
info_errors = {"C2": 0, "L_003": 0}

files = []

print(orange() + "Checking files..." + end())
check_files()
print(orange() + "Checking for " + red() + "major " + orange() + "errors...")
check_majors()